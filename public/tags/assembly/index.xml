<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assembly on WriteUps &amp; Recherches Cybersécurité</title>
    <link>https://Istaarkk.github.io/cybersecurity-notes/tags/assembly/</link>
    <description>Recent content in Assembly on WriteUps &amp; Recherches Cybersécurité</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Sat, 27 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://Istaarkk.github.io/cybersecurity-notes/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FCSC 2024 - Challenge de Reverse Engineering</title>
      <link>https://Istaarkk.github.io/cybersecurity-notes/writeups/fcsc/2024-04-27-reverse-challenge/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://Istaarkk.github.io/cybersecurity-notes/writeups/fcsc/2024-04-27-reverse-challenge/</guid>
      <description>Write-up: Challenge de Reverse Engineering Introduction Ce write-up présente la résolution d&amp;rsquo;un challenge de reverse engineering où nous devions analyser du code assembleur pour trouver un flag au format FCSC{&amp;hellip;}.&#xA;Analyse du code Le code fourni est une représentation désassemblée d&amp;rsquo;un programme binaire. En analysant les fonctions principales, nous avons pu comprendre le fonctionnement général du programme:&#xA;main() initialise le programme et déchiffre trois chaînes de caractères en effectuant un XOR avec des constantes (0x42, 0x13, 0x37) Le programme obtient une entrée utilisateur via VsvYbpipYYgRoCeFtoxhtAmdFuNu3WvV() Cette entrée est transformée par wKtyPoT4WdyrkVzhvYUfvqo3M9iPVMd3() Le résultat est comparé avec une valeur cible (jMunhwoW4bRqeCdJfXvfNrRm) dans VakkEeHbtHMpNqXPMkadR4v7K() Le mécanisme de chiffrement La fonction clé est wKtyPoT4WdyrkVzhvYUfvqo3M9iPVMd3() qui transforme l&amp;rsquo;entrée utilisateur comme suit:</description>
    </item>
    <item>
      <title>GDB and NASM Assembly Guide - WriteUp</title>
      <link>https://Istaarkk.github.io/cybersecurity-notes/writeups/reverse/gdb-nasm/</link>
      <pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://Istaarkk.github.io/cybersecurity-notes/writeups/reverse/gdb-nasm/</guid>
      <description>GDB and NASM Assembly Guide This writeup provides a comprehensive guide to using GDB for debugging NASM assembly code, with practical examples and explanations.&#xA;Instructions and Code for GDB and NASM Open a File with GDB Steps:&#xA;Open the file gdb in GDB: gdb ./gdb disassemble _start Set a breakpoint at a specific offset: b *(_start + 16) Run the program and inspect the rax register: run info registers rax Add the following instruction at the end of the code to move the value from rsp into rax: mov rax, rsp Compile the Assembly Code Assuming your assembly code is saved as mov.</description>
    </item>
  </channel>
</rss>
